/* MyParser.java */
/* Generated By:JavaCC: Do not edit this line. MyParser.java */
package pl.frontend;


import pl.abstractsyntax.AbstractSyntaxConstructors;
import pl.abstractsyntax.AbstractSyntaxConstructors.*;
import pl.abstractsyntax.Declaration;
import pl.abstractsyntax.Declaration.*;
import pl.abstractsyntax.Exp;
import pl.abstractsyntax.Inst;
import pl.abstractsyntax.Inst.InstructionSwitch.Case;
import pl.abstractsyntax.Program;
import pl.type.Type.*;



class ProcHeader {
   public String ident;
   public ParamList params;
   public ProcHeader(String ident, ParamList params) {
      this.ident = ident;
      this.params = params;
   }
}

public class MyParser implements MyParserConstants {
    private AbstractSyntaxConstructors ops;
    public void setOps(AbstractSyntaxConstructors ops) {
        this.ops = ops;
    }
    String linkToSource(Token token) {
        return "( " + token.beginLine + ", " + token.beginColumn + " )";
    }

  final public void nStart() throws ParseException {
    nProg();
    jj_consume_token(0);
  }

  final public Program nProg() throws ParseException {DecList decs; Inst inst;
    decs = nDecs();
    inst = nInst();
{if ("" != null) return ops.prog(decs, inst);}
    throw new Error("Missing return statement in function");
  }

  final public void nOptSemicolon() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 40:{
      jj_consume_token(40);
      break;
      }
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public DecList nDecs() throws ParseException {DecList decs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:
    case VAR:
    case PROC:{
      decs = nDecList();
{if ("" != null) return decs;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
{if ("" != null) return ops.noDecs();}
    }
    throw new Error("Missing return statement in function");
  }

  final public DecList nDecList() throws ParseException {Declaration dec; DecList decs;
    dec = nDec();
    decs = nRDecList(ops.decs(ops.noDecs(), dec));
{if ("" != null) return decs;}
    throw new Error("Missing return statement in function");
  }

  final public DecList nRDecList(DecList decsh) throws ParseException {Declaration dec; DecList decs;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:
    case VAR:
    case PROC:{
      dec = nDec();
      decs = nRDecList(ops.decs(decsh, dec));
{if ("" != null) return decs;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
{if ("" != null) return decsh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Declaration nDec() throws ParseException {DefinedType type; Token id; ProcHeader header; Inst block; Token proc;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR:{
      jj_consume_token(VAR);
      type = nType0();
      id = jj_consume_token(ident);
      nOptSemicolon();
{if ("" != null) return ops.decVar(type, id.image, linkToSource(id));}
      break;
      }
    case TYPE:{
      jj_consume_token(TYPE);
      type = nType0();
      id = jj_consume_token(ident);
      jj_consume_token(40);
{if ("" != null) return ops.decVar(type, id.image, linkToSource(id));}
      break;
      }
    case PROC:{
      proc = jj_consume_token(PROC);
      header = nProcHeader();
      block = nBlock();
      nOptSemicolon();
{if ("" != null) return ops.decProc(header.ident, header.params, block, linkToSource(proc));}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ProcHeader nProcHeader() throws ParseException {Token id; ParamList params;
    id = jj_consume_token(ident);
    jj_consume_token(41);
    params = nParams();
    jj_consume_token(42);
{if ("" != null) return new ProcHeader(id.image, params);}
    throw new Error("Missing return statement in function");
  }

  final public ParamList nParams() throws ParseException {ParamList params;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOL:
    case FLOAT:
    case CHAR:
    case STRING:
    case STRUCT:
    case ident:{
      params = nParamList();
{if ("" != null) return params;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
{if ("" != null) return ops.noParams();}
    }
    throw new Error("Missing return statement in function");
  }

  final public ParamList nParamList() throws ParseException {DeclarationParam param; ParamList params;
    param = nParam();
    params = nRParamList(ops.params(ops.noParams(), param));
{if ("" != null) return params;}
    throw new Error("Missing return statement in function");
  }

  final public ParamList nRParamList(ParamList paramsh) throws ParseException {DeclarationParam param; ParamList params;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:{
      jj_consume_token(43);
      param = nParam();
      params = nRParamList(ops.params(paramsh, param));
{if ("" != null) return params;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
{if ("" != null) return paramsh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public DeclarationParam nParam() throws ParseException {DefinedType type; boolean mode; Token id;
    type = nType0();
    mode = nMode();
    id = jj_consume_token(ident);
{if ("" != null) return ops.decParam(type, mode, id.image, linkToSource(id));}
    throw new Error("Missing return statement in function");
  }

  final public boolean nMode() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 44:{
      jj_consume_token(44);
{if ("" != null) return true;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
{if ("" != null) return false;}
    }
    throw new Error("Missing return statement in function");
  }

  final public DefinedType nType0() throws ParseException {DefinedType t; DefinedType tt;
    t = nType1();
    tt = nRType0(t);
{if ("" != null) return tt;}
    throw new Error("Missing return statement in function");
  }

  final public DefinedType nRType0(DefinedType th) throws ParseException {DefinedType t; Token n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:{
      jj_consume_token(45);
      t = nRType0(ops.typePointer(th));
{if ("" != null) return t;}
      break;
      }
    case 46:{
      jj_consume_token(46);
      n = jj_consume_token(intLiteral);
      jj_consume_token(47);
      t = nRType0(ops.typeArray(th, ops.toInt(n.image)));
{if ("" != null) return t;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
{if ("" != null) return th;}
    }
    throw new Error("Missing return statement in function");
  }

  final public FieldList nFieldList() throws ParseException {DefinedType t; Token id; FieldList fields;
    t = nType0();
    id = jj_consume_token(ident);
    jj_consume_token(40);
    fields = nRFieldList(ops.oneField(ops.field(t, id.image)));
{if ("" != null) return fields;}
    throw new Error("Missing return statement in function");
  }

  final public FieldList nRFieldList(FieldList fieldsh) throws ParseException {DefinedType t; Token id; FieldList fields;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case BOOL:
    case FLOAT:
    case CHAR:
    case STRING:
    case STRUCT:
    case ident:{
      t = nType0();
      id = jj_consume_token(ident);
      jj_consume_token(40);
      fields = nRFieldList(ops.fields(fieldsh, ops.field(t, id.image)));
{if ("" != null) return fields;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
{if ("" != null) return fieldsh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public DefinedType nType1() throws ParseException {FieldList fields; Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRUCT:{
      jj_consume_token(STRUCT);
      jj_consume_token(48);
      fields = nFieldList();
      jj_consume_token(49);
{if ("" != null) return ops.typeRecord(fields);}
      break;
      }
    case ident:{
      id = jj_consume_token(ident);
{if ("" != null) return ops.typeRef(id.image);}
      break;
      }
    case INT:{
      jj_consume_token(INT);
{if ("" != null) return ops.typeInt();}
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
{if ("" != null) return ops.typeBool();}
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
{if ("" != null) return ops.typeReal();}
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
{if ("" != null) return ops.typeChar();}
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
{if ("" != null) return ops.typeString();}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst nBlock() throws ParseException {DecList decs; InstList insts;
    jj_consume_token(48);
    decs = nDecs();
    insts = nInsts();
    jj_consume_token(49);
{if ("" != null) return ops.block(decs, insts);}
    throw new Error("Missing return statement in function");
  }

  final public InstList nInsts() throws ParseException {InstList insts;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case WHILE:
    case DO:
    case IF:
    case SWITCH:
    case CALL:
    case NULL:
    case NEW:
    case DELETE:
    case READ:
    case WRITE:
    case ident:
    case intLiteral:
    case realLiteral:
    case charLiteral:
    case stringLiteral:
    case 41:
    case 45:
    case 48:
    case 54:
    case 60:
    case 64:{
      insts = nInstList();
{if ("" != null) return insts;}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
{if ("" != null) return ops.noInsts();}
    }
    throw new Error("Missing return statement in function");
  }

  final public InstList nInstList() throws ParseException {Inst inst; InstList insts;
    inst = nInst();
    insts = nRInstList(ops.insts(ops.noInsts(), inst));
{if ("" != null) return insts;}
    throw new Error("Missing return statement in function");
  }

  final public InstList nRInstList(InstList instsh) throws ParseException {Inst inst; InstList insts;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case WHILE:
    case DO:
    case IF:
    case SWITCH:
    case CALL:
    case NULL:
    case NEW:
    case DELETE:
    case READ:
    case WRITE:
    case ident:
    case intLiteral:
    case realLiteral:
    case charLiteral:
    case stringLiteral:
    case 41:
    case 45:
    case 48:
    case 54:
    case 60:
    case 64:{
      inst = nInst();
      insts = nRInstList(ops.insts(instsh, inst));
{if ("" != null) return insts;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
{if ("" != null) return instsh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst nInst() throws ParseException {Exp expLeft; Exp expRight; Inst block;
     Token id; ArgList args; Exp exp; Inst inst;
     CaseList cases; Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:
    case FALSE:
    case NULL:
    case ident:
    case intLiteral:
    case realLiteral:
    case charLiteral:
    case stringLiteral:
    case 41:
    case 45:
    case 54:
    case 60:
    case 64:{
      expLeft = nExp0();
      t = jj_consume_token(50);
      expRight = nExp0();
{if ("" != null) return ops.assig(expLeft, expRight, linkToSource(t));}
      break;
      }
    case 48:{
      block = nBlock();
      nOptSemicolon();
{if ("" != null) return block;}
      break;
      }
    case CALL:{
      t = jj_consume_token(CALL);
      id = jj_consume_token(ident);
      args = nArgs();
      jj_consume_token(40);
{if ("" != null) return ops.call(id.image, args, linkToSource(t));}
      break;
      }
    case WHILE:{
      t = jj_consume_token(WHILE);
      exp = nExp0();
      block = nBlock();
      nOptSemicolon();
{if ("" != null) return ops.while_(exp, block, linkToSource(t));}
      break;
      }
    case DO:{
      t = jj_consume_token(DO);
      block = nBlock();
      jj_consume_token(WHILE);
      exp = nExp0();
      jj_consume_token(40);
{if ("" != null) return ops.doWhile(block, exp, linkToSource(t));}
      break;
      }
    case IF:{
      t = jj_consume_token(IF);
      exp = nExp0();
      jj_consume_token(THEN);
      block = nBlock();
      inst = nRInstIf(exp, block, linkToSource(t));
{if ("" != null) return inst;}
      break;
      }
    case SWITCH:{
      t = jj_consume_token(SWITCH);
      exp = nExp0();
      jj_consume_token(48);
      cases = nCases();
      inst = nRInstSwitch(exp, cases, linkToSource(t));
{if ("" != null) return inst;}
      break;
      }
    case NEW:{
      t = jj_consume_token(NEW);
      exp = nExp0();
{if ("" != null) return ops.new_(exp, linkToSource(t));}
      break;
      }
    case DELETE:{
      t = jj_consume_token(DELETE);
      exp = nExp0();
{if ("" != null) return ops.free(exp, linkToSource(t));}
      break;
      }
    case READ:{
      t = jj_consume_token(READ);
      exp = nExp0();
{if ("" != null) return ops.read(exp, linkToSource(t));}
      break;
      }
    case WRITE:{
      t = jj_consume_token(WRITE);
      exp = nExp0();
{if ("" != null) return ops.write(exp, linkToSource(t));}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArgList nArgs() throws ParseException {ArgList args;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case WITH:{
      jj_consume_token(WITH);
      args = nArgList();
{if ("" != null) return args;}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
{if ("" != null) return ops.noArgs();}
    }
    throw new Error("Missing return statement in function");
  }

  final public ArgList nArgList() throws ParseException {Exp exp; ArgList args;
    exp = nExp0();
    args = nRArgList(ops.args(ops.noArgs(), exp));
{if ("" != null) return args;}
    throw new Error("Missing return statement in function");
  }

  final public ArgList nRArgList(ArgList argsh) throws ParseException {Exp exp; ArgList args;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 43:{
      jj_consume_token(43);
      exp = nExp0();
      args = nRArgList(ops.args(argsh, exp));
{if ("" != null) return args;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
{if ("" != null) return ops.noArgs();}
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst nRInstIf(Exp exph, Inst blockh, String linkh) throws ParseException {Inst block;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      block = nBlock();
      nOptSemicolon();
{if ("" != null) return ops.ifThenElse(exph, blockh, block, linkh);}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
{if ("" != null) return ops.ifThen(exph, blockh, linkh);}
    }
    throw new Error("Missing return statement in function");
  }

  final public Inst nRInstSwitch(Exp exph, CaseList casesh, String linkh) throws ParseException {Inst inst;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DEFAULTINST:{
      jj_consume_token(DEFAULTINST);
      jj_consume_token(51);
      inst = nInst();
      jj_consume_token(49);
      nOptSemicolon();
{if ("" != null) return ops.switchDefault(exph, casesh, inst, linkh);}
      break;
      }
    case 49:{
      jj_consume_token(49);
      nOptSemicolon();
{if ("" != null) return ops.switch_(exph, casesh, linkh);}
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public CaseList nCases() throws ParseException {CaseList cases;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASE:{
      cases = nCaseList();
{if ("" != null) return cases;}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
{if ("" != null) return ops.noCases();}
    }
    throw new Error("Missing return statement in function");
  }

  final public CaseList nCaseList() throws ParseException {Case c; CaseList cases;
    c = nCase();
    cases = nRCaseList(ops.cases(ops.noCases(), c));
{if ("" != null) return cases;}
    throw new Error("Missing return statement in function");
  }

  final public CaseList nRCaseList(CaseList casesh) throws ParseException {Case c; CaseList cases;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CASE:{
      c = nCase();
      cases = nRCaseList(ops.cases(casesh, c));
{if ("" != null) return cases;}
      break;
      }
    default:
      jj_la1[18] = jj_gen;
{if ("" != null) return casesh;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Case nCase() throws ParseException {Case c; Token t;
    t = jj_consume_token(CASE);
    c = nRCase(linkToSource(t));
{if ("" != null) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Case nRCase(String linkh) throws ParseException {Inst inst; Token n;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
      jj_consume_token(51);
      inst = nInst();
{if ("" != null) return ops.case_(ops.constantBool(true), inst, linkh);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      jj_consume_token(51);
      inst = nInst();
{if ("" != null) return ops.case_(ops.constantBool(false), inst, linkh);}
      break;
      }
    case intLiteral:{
      n = jj_consume_token(intLiteral);
      jj_consume_token(51);
      inst = nInst();
{if ("" != null) return ops.case_(ops.constantInt(ops.toInt(n.image)), inst, linkh);}
      break;
      }
    case realLiteral:{
      n = jj_consume_token(realLiteral);
      jj_consume_token(51);
      inst = nInst();
{if ("" != null) return ops.case_(ops.constantReal(ops.toReal(n.image)), inst, linkh);}
      break;
      }
    case charLiteral:{
      n = jj_consume_token(charLiteral);
      jj_consume_token(51);
      inst = nInst();
{if ("" != null) return ops.case_(ops.constantChar(ops.toChar(n.image)), inst, linkh);}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nExp0() throws ParseException {Exp e1; Exp e2;
    e1 = nExp1();
    e2 = nRExp0(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Exp nRExp0(Exp exph) throws ParseException {Exp exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 52:{
      jj_consume_token(52);
      exp = nExp1();
{if ("" != null) return ops.equal(exph, exp);}
      break;
      }
    case 53:{
      jj_consume_token(53);
      exp = nExp1();
{if ("" != null) return ops.unequal(exph, exp);}
      break;
      }
    case 54:{
      jj_consume_token(54);
      exp = nExp1();
{if ("" != null) return ops.less(exph, exp);}
      break;
      }
    case 55:{
      jj_consume_token(55);
      exp = nExp1();
{if ("" != null) return ops.greater(exph, exp);}
      break;
      }
    case 56:{
      jj_consume_token(56);
      exp = nExp1();
{if ("" != null) return ops.lessEqual(exph, exp);}
      break;
      }
    case 57:{
      jj_consume_token(57);
      exp = nExp1();
{if ("" != null) return ops.greaterEqual(exph, exp);}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nExp1() throws ParseException {Exp e1; Exp e2;
    e1 = nExp2();
    e2 = nRRExp1(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Exp nRRExp1(Exp exph) throws ParseException {Exp e1; Exp e2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 58:{
      jj_consume_token(58);
      e1 = nExp2();
      e2 = nRExp1(ops.or(exph, e1));
{if ("" != null) return e2;}
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      e2 = nRExp1(exph);
{if ("" != null) return e2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nRExp1(Exp exph) throws ParseException {Exp e1; Exp e2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 59:{
      jj_consume_token(59);
      e1 = nExp2();
      e2 = nRExp1(ops.sum(exph, e1));
{if ("" != null) return e2;}
      break;
      }
    case 60:{
      jj_consume_token(60);
      e1 = nExp2();
      e2 = nRExp1(ops.diff(exph, e1));
{if ("" != null) return e2;}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nExp2() throws ParseException {Exp e1; Exp e2;
    e1 = nExp3();
    e2 = nRRExp2(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Exp nRRExp2(Exp exph) throws ParseException {Exp e1; Exp e2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 61:{
      jj_consume_token(61);
      e1 = nExp3();
      e2 = nRExp2(ops.and(exph, e1));
{if ("" != null) return e2;}
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      e2 = nRExp2(exph);
{if ("" != null) return e2;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nRExp2(Exp exph) throws ParseException {Exp e1; Exp e2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:{
      jj_consume_token(45);
      e1 = nExp3();
      e2 = nRExp2(ops.prod(exph, e1));
{if ("" != null) return e2;}
      break;
      }
    case 62:{
      jj_consume_token(62);
      e1 = nExp3();
      e2 = nRExp2(ops.quot(exph, e1));
{if ("" != null) return e2;}
      break;
      }
    case 63:{
      jj_consume_token(63);
      e1 = nExp3();
      e2 = nRExp2(ops.rest(exph, e1));
{if ("" != null) return e2;}
      break;
      }
    default:
      jj_la1[24] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nExp3() throws ParseException {Exp exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 60:{
      jj_consume_token(60);
      exp = nExp3();
{if ("" != null) return ops.signChange(exp);}
      break;
      }
    case 64:{
      jj_consume_token(64);
      exp = nExp3();
{if ("" != null) return ops.not(exp);}
      break;
      }
    case 54:{
      jj_consume_token(54);
      exp = nRExp3();
{if ("" != null) return exp;}
      break;
      }
    case TRUE:
    case FALSE:
    case NULL:
    case ident:
    case intLiteral:
    case realLiteral:
    case charLiteral:
    case stringLiteral:
    case 41:
    case 45:{
      exp = nExp4();
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nRExp3() throws ParseException {Exp exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      jj_consume_token(55);
      exp = nExp4();
{if ("" != null) return ops.conversionInt(exp);}
      break;
      }
    case BOOL:{
      jj_consume_token(BOOL);
      jj_consume_token(55);
      exp = nExp4();
{if ("" != null) return ops.conversionBool(exp);}
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      jj_consume_token(55);
      exp = nExp4();
{if ("" != null) return ops.conversionReal(exp);}
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      jj_consume_token(55);
      exp = nExp4();
{if ("" != null) return ops.conversionChar(exp);}
      break;
      }
    case STRING:{
      jj_consume_token(STRING);
      jj_consume_token(55);
      exp = nExp4();
{if ("" != null) return ops.conversionString(exp);}
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nExp4() throws ParseException {Exp e1; Exp e2;
    e1 = nExp5();
    e2 = nRExp4(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Exp nRExp4(Exp exph) throws ParseException {Exp exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 65:{
      jj_consume_token(65);
      exp = nExp5();
{if ("" != null) return ops.chainElement(exph, exp);}
      break;
      }
    default:
      jj_la1[27] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nExp5() throws ParseException {Exp e1; Exp e2;
    e1 = nExp6();
    e2 = nRExp5(e1);
{if ("" != null) return e2;}
    throw new Error("Missing return statement in function");
  }

  final public Exp nRExp5(Exp exph) throws ParseException {Exp exp; Exp e1; Exp e2; Token id; Token link;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 46:{
      link = jj_consume_token(46);
      e1 = nExp0();
      jj_consume_token(47);
      e2 = nRExp5(ops.index(exph, e1, linkToSource(link)));
{if ("" != null) return e2;}
      break;
      }
    case 66:{
      link = jj_consume_token(66);
      id = jj_consume_token(ident);
      exp = nRExp5(ops.select(exph, id.image, linkToSource(link)));
{if ("" != null) return exp;}
      break;
      }
    case 67:{
      link = jj_consume_token(67);
      id = jj_consume_token(ident);
      exp = nRExp5(ops.select(ops.deref(exph), id.image, linkToSource(link)));
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
{if ("" != null) return exph;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nExp6() throws ParseException {Exp exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:{
      jj_consume_token(45);
      exp = nExp6();
{if ("" != null) return ops.deref(exp);}
      break;
      }
    case TRUE:
    case FALSE:
    case NULL:
    case ident:
    case intLiteral:
    case realLiteral:
    case charLiteral:
    case stringLiteral:
    case 41:{
      exp = nExp7();
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nExp7() throws ParseException {Exp exp; Exp lit; Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ident:{
      id = jj_consume_token(ident);
{if ("" != null) return ops.variable(id.image);}
      break;
      }
    case TRUE:
    case FALSE:
    case NULL:
    case intLiteral:
    case realLiteral:
    case charLiteral:
    case stringLiteral:{
      lit = nLiteral();
{if ("" != null) return lit;}
      break;
      }
    case 41:{
      jj_consume_token(41);
      exp = nExp0();
      jj_consume_token(42);
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp nLiteral() throws ParseException {Token lit;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case intLiteral:{
      lit = jj_consume_token(intLiteral);
{if ("" != null) return ops.constantInt(ops.toInt(lit.image));}
      break;
      }
    case realLiteral:{
      lit = jj_consume_token(realLiteral);
{if ("" != null) return ops.constantReal(ops.toReal(lit.image));}
      break;
      }
    case charLiteral:{
      lit = jj_consume_token(charLiteral);
{if ("" != null) return ops.constantChar(ops.toChar(lit.image));}
      break;
      }
    case stringLiteral:{
      lit = jj_consume_token(stringLiteral);
{if ("" != null) return ops.constantString(lit.image);}
      break;
      }
    case TRUE:{
      lit = jj_consume_token(TRUE);
{if ("" != null) return ops.constantBool(true);}
      break;
      }
    case FALSE:{
      lit = jj_consume_token(FALSE);
{if ("" != null) return ops.constantBool(false);}
      break;
      }
    case NULL:{
      lit = jj_consume_token(NULL);
{if ("" != null) return null;}
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public MyParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x8060000,0x8060000,0x8060000,0x1f800,0x0,0x0,0x0,0x1f800,0x1f800,0xd1380600,0xd1380600,0xd1380600,0x20000000,0x0,0x800000,0x4000000,0x2000000,0x2000000,0x600,0x0,0x0,0x0,0x0,0x0,0x40000600,0xf800,0x0,0x0,0x40000600,0x40000600,0x40000600,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100,0x0,0x0,0x0,0x8,0x800,0x1000,0x6000,0x8,0x8,0x104122ff,0x104122ff,0x104122ff,0x0,0x800,0x0,0x20000,0x0,0x0,0x70,0x3f00000,0x4000000,0x18000000,0x20000000,0xc0002000,0x104022f8,0x0,0x0,0x4000,0x22f8,0x2f8,0xf0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x2,0xc,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
